
""" 
Plot the metrics of distances between the phasors from the .csv file generated by
PhasorDistribution_STED_EllipseFit_2Species.py
"""

import os
import glob

import numpy
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn
import easygui
import itertools
from sys import path as path1; 
Functionspath=os.path.join(os.path.dirname(os.path.dirname(__file__)), "Functions")
path1.append(Functionspath)
from statistics_functions import get_significance
import scipy

matplotlib.rcParams['axes.linewidth'] = 0.8

# Ask user name of the folder where the plots will be saved and create it
savefoldername =str(input("Name of folder: "))
savefolder=os.path.join(os.path.expanduser("~/Desktop"),savefoldername + "_PhasorDists")
os.makedirs(savefolder,exist_ok=True)

#Path to folder containing the .csv files
csvpath = easygui.diropenbox(default=os.path.expanduser("~/Desktop"))
folders=[csvpath]


powers=["_*","_10","_20","_30","_40"]
powersnum=[0,10,20,30,40]
ticklabels=["0","44","88","132","176"]
colors=[['deepskyblue', 'deepskyblue','deepskyblue','deepskyblue','deepskyblue','deepskyblue'],["hotpink","hotpink","hotpink","hotpink","hotpink","hotpink"]]
colors_centroids=[["#7ce8ffff","#55d0ffff","#00acdfff","#0080bfff","#00456bff"],["#fcbcd7ff","#f9a3cbff","#ef87beff","#e569b3ff","#bf4290ff"]]

# Read the .csv files and concatenate them
cumdf=[]
csvfull=[]
for i,folder in enumerate(folders):
    #colors = ["xkcd:peacock blue", "xkcd:brick orange"]
    csvlist=glob.glob(os.path.join(folder,"*.csv"))
    Overall_data= pd.concat(map(pd.read_csv, csvlist))
    cumdf.append(Overall_data)
    print(Overall_data.shape)
    print(list(Overall_data.columns))

# Make a figure for each metric
fig1,ax1=plt.subplots(figsize=(4,3))
fig2,ax2=plt.subplots(figsize=(4,3))
fig111,ax111 = plt.subplots(figsize=(4,2))
fig1111,ax1111 = plt.subplots(figsize=(4,3))

# Create a violin plot of the distances between the centroids of the ellipses for each STED power
#seaborn.stripplot(x=Overall_data["Power"], y=Overall_data['Centroid Distance'],ax=ax1, size=5,color="blueviolet")
seaborn.violinplot(x=Overall_data["Power"],y=Overall_data['Centroid Distance'],inner="quarts",ax=ax1,width=0.7)
ax1.set_ylabel("Distance between centroids (different dye)")
ax1.set_xlabel("Depletion Power [mW]")


# Create a violin plot of the shortest distances between the ellipses for each STED power
#seaborn.stripplot(x=Overall_data["Power"], y=Overall_data['Shortest Distance'],ax=ax111, size=5,color="blueviolet")
seaborn.violinplot(x=Overall_data["Power"],y=Overall_data['Shortest Distance'],inner="quarts",ax=ax111,width=0.7)
ax111.set_ylabel("Shortest distance between ellipses (different dye)")
ax111.set_xlabel("Depletion Power [mW]")
ax2.set_xlabel("Depletion Power [mW]")

# Create a violin plot of the intersection over union of the ellipses for each STED power
#seaborn.stripplot(x=Overall_data["Power"], y=Overall_data['IOU'],ax=ax1111, size=5,color="blueviolet")
seaborn.violinplot(x=Overall_data["Power"],y=Overall_data['IOU'],inner="quarts",ax=ax1111,width=0.7)
ax1111.set_ylabel("Intersection over union of ellipses")
ax1111.set_xlabel("Depletion Power [mW]")

# Save the figures
fig111.savefig(os.path.join(savefolder,'Violinplot_Shortestdistance_Ellipses.pdf'),transparent='True', bbox_inches="tight",dpi=900)
fig1111.savefig(os.path.join(savefolder,'Violinplot_IOU_Ellipses.pdf'),transparent='True', bbox_inches="tight",dpi=900)
fig1.savefig(os.path.join(savefolder,"Centroids_Distances_violin.pdf"),transparent=True, bbox_inches="tight",dpi=900)


# Statistical analysis of different ellipse metrics for each STED power
print("#################################################")
powers = numpy.unique(Overall_data["Power"])
print(powers)
print("get_Significance Shortest Distance")
sig=get_significance([Overall_data.loc[(Overall_data["Power"]==power)]['Shortest Distance'] for power in powers], verbose=True)
print(sig)
print("#################################################")
print("get_Significance Centroid Distance")
sig=get_significance([Overall_data.loc[(Overall_data["Power"]==power)]['Centroid Distance'] for power in powers], verbose=True)
print(sig)
print("#################################################")
print("get_Significance IOU")
sig=get_significance([Overall_data.loc[(Overall_data["Power"]==power)]['IOU'] for power in powers], verbose=True)
print(sig)
print("#################################################")

plt.show()